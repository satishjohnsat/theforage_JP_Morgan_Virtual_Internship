From 9f1747a9a92c5e33ab9e2f2727701feca71120c7 Mon Sep 17 00:00:00 2001
From: Nikhil Nagrale <nknagrale634@gmail.com>
Date: Sun, 17 May 2020 20:30:34 +0530
Subject: [PATCH] Create Patch File

---
 src/App.tsx   | 28 +++++++++++++++++++++-------
 src/Graph.tsx | 11 ++++++++++-
 2 files changed, 31 insertions(+), 8 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..940f03d 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,19 +31,31 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+  	if(this.state.showGraph) {
+    	return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
-  }
+  	let x = 0;
+  	const interval = setInterval(() => {
+    	DataStreamer.getData((serverResponds: ServerRespond[]) => {
+      	// Update the state by creating a new array of data that consists of
+      	// Previous data in the state and the new data from server
+      		this.setState({
+      			data: serverResponds,
+      			showGraph: true, 
+      		});
+    	});
+    	x++;
+    	if (x > 1000) {
+    		clearInterval(interval);
+    	}
+    }, 100);
+}
 
   /**
    * Render the App react component
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..86d0ddf 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -49,6 +49,15 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view',"y_line");
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots','["timestamp"]');
+      elem.setAttribute('columns','["top_ask_price"]');
+      elem.setAttribute('aggregates',`
+      	{"stock":"distinct count",
+      	"top_ask_price":"avg",
+      	"top_bid_price":"avg",
+      	"timestamp":"distinct count"}`)
     }
   }
 
-- 
2.25.0.windows.1

